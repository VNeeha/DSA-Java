    LeetCode-https://leetcode.com/problems/rotate-array/
    public void rotate(int[] nums, int k) {
            // O(n2)-brute force
                /*
                while(k>0){
                    int temp=nums[nums.length-1];
                    for(int i=nums.length-1;i>0;i--){
                        nums[i]=nums[i-1];
                    }
                    nums[0]=temp;
                    k--;
                } */

            // TC-O(n),SC-O(d)
               /* if(nums.length==1||nums.length==k)
                return;
                if(nums.length<k)
                k=k%nums.length;
                int[] temp=new int[k];
                int n=nums.length;
                for(int i=n-k;i<n;i++){
                    temp[i-(n-k)]=nums[i];
                }
                for(int i=n-k-1;i>=0;i--){
                    nums[i+k]=nums[i];
                }
                for(int i=0;i<k;i++){
                    nums[i]=temp[i];
                }
                    */

                // TC-O(n),SC-O(1)
                if(nums.length==1||nums.length==k)
                return;
                if(nums.length<k)
                k=k%nums.length;
                int n=nums.length;
                reverse1(nums,0,n-k-1);
                reverse2(nums,n-k,n-1);
                reverse1(nums,0,n-1);
        }
        private static void reverse1(int[] nums,int start,int end){
            for(int i=start;i<=end/2;i++){
                int temp=nums[i];
                nums[i]=nums[end-i];
                nums[end-i]=temp;
            }
        }
        private static void reverse2(int[] nums,int start,int end){
            for(int i=start;i<=(start+end)/2;i++){
                int temp=nums[i];
                nums[i]=nums[end-(i-start)];
                nums[end-(i-start)]=temp;
            }
        }
